[
  {
    "objectID": "index.html#data-exploration",
    "href": "index.html#data-exploration",
    "title": "AGILE2022 Reproducible Codes",
    "section": "Data Exploration",
    "text": "Data Exploration\n\nCall Packages and data\n\nlibrary(tidyverse) # data wrangling and plotting\nlibrary(sf) # Manipulating spatial files\nlibrary(tmap) # Dealing with maps\nlibrary(spgwr) # GWRs\nlibrary(spdep) # moran's I\n\nAs the data were all pre-cleaned, the csv files were all put into the same column key called Name.\n\nstrava <- read_csv(\"Cleaned Files/strava.csv\") # response\ngreen <- read_csv(\"Cleaned Files/green.csv\") # predictors\nptai <- read_csv(\"Cleaned Files/ptai.csv\") # predictors\nbuildings <- read_csv(\"Cleaned Files/buildings.csv\") # predictors\nshp <- read_sf(\"Cleaned Files/Glasgow_IZ.shp\")\n\n# merge all \nstrava %>% \n  left_join(green, by = \"Name\") %>% \n  left_join(ptai, by = \"Name\") %>% \n  left_join(buildings, by = \"Name\") -> glasgow_df\n\nThe Figure 1 shows the correlation between Strava 2017 and Strava 2018. The correlation is 0.9975779, which means it is nearly identical - not what I expected!\n\nplot(glasgow_df$ride17, glasgow_df$ride18)\n\ncor(glasgow_df$ride17, glasgow_df$ride18)\n\n[1] 0.9975779\n\n\n\n\n\nFigure 1: Correlation of Strava 2017 against Strava 2018"
  },
  {
    "objectID": "index.html#exploring-the-variables",
    "href": "index.html#exploring-the-variables",
    "title": "AGILE2022 Reproducible Codes",
    "section": "Exploring the Variables",
    "text": "Exploring the Variables\nTo get an immediate understanding of the variables, the best thing is to map the variables and get summary tables. First, let us look at the summary of the variables.\n\nglasgow_df %>% summary()\n\n     Name               ride17            ride18            green       \n Length:136         Min.   :   1760   Min.   :   2275   Min.   : 1.320  \n Class :character   1st Qu.:  32800   1st Qu.:  33606   1st Qu.: 5.780  \n Mode  :character   Median :  79292   Median :  81615   Median : 8.068  \n                    Mean   : 128697   Mean   : 135287   Mean   : 8.837  \n                    3rd Qu.: 153040   3rd Qu.: 168255   3rd Qu.:11.670  \n                    Max.   :1312075   Max.   :1421505   Max.   :20.664  \n      PTAI            height      \n Min.   : 245.8   Min.   : 5.667  \n 1st Qu.: 542.8   1st Qu.: 7.358  \n Median : 808.5   Median : 8.098  \n Mean   :1022.2   Mean   : 9.029  \n 3rd Qu.:1213.8   3rd Qu.: 9.566  \n Max.   :4990.8   Max.   :21.133  \n\n\nHere we transform the data to a longer format glasgow_df_long using the pivot_longer function. This is to directly execute ggplot with facet wrapping. After the data transformation, we then merge the shapefile with the integrated data frame that is gl_shp.\n\nglasgow_df %>% \n  rename(Strava2017 = ride17,\n         Strava2018 = ride18) %>% \n  pivot_longer(!Name,\n               names_to = \"Type\",\n               values_to = \"Value\") -> glasgow_df_long\n\nshp %>% \n  left_join(glasgow_df_long, by = \"Name\") -> gl_shp\n\nLets look at the strava data first. Here we see that during 2017 and 2018 people including the City Centre South, Laurieston and Tradeston, City Centre East, Finnieston and Kelvinhaugh, and Calton and Gallowgate were identified as the most reported areas.\n\n# Strava Users\ngl_shp %>% \n  filter(Type %in% c(\"Strava2017\", \"Strava2018\")) %>% \n  mutate(Value2 = cut(Value,\n                     breaks = c(0, 50000, 100000, 150000, 200000, 300000, +Inf),\n                     labels = c(\"0-50\", \"50-100\", \"100-150\", \"150-200\", \"200-30\", \">300\"))) %>% \n  tm_shape() +\n  tm_polygons(\"Value2\", title = \"Strava ('000s)\", palette=\"-RdBu\") +\n  tm_facets(by = \"Type\", free.coords = F, free.scales = F, ncol = 2) -> gl_strava\n\ngl_strava\n\n\n\n#tmap_save(gl_strava, \"strava.jpg\", width = 1000, height = 400, dpi = 300)\n\nThe figures below show that the per cent of the greenness (by Immediate Zones) gradually tends to decrease as it goes outside the city centre. The average is 8% across the whole area but the lowest is situated in the city centre and the city south.\nThe height of the buildings were concentrated around the city centre. The City Centre South was the highest at 21.1% followed by City Centre East and City Centre West.\nPTAI (Public Transport Availability Indicators) also tend to more clustered in the city centre (>3000) and around the major bus routes (>2000) while the north and the east were relatively lower (<1000).\n\n# Other variables\ngl_shp %>% \n  filter(Type %in% c(\"green\", \"PTAI\", \"height\")) %>%\n  tm_shape() +\n  tm_polygons(\"Value\", title = \"\", palette=\"-RdBu\") +\n  tm_facets(by = \"Type\", free.coords = F, free.scales = T, ncol = 3) +\n  tm_layout(legend.position = c(\"right\", \"top\"),  \n            title.position = c('right', 'top')) -> gl_variable\n\ngl_variable\n\n\n\n#tmap_save(gl_variable, \"variables.jpg\", width = 1000, height = 2500, dpi = 300)"
  },
  {
    "objectID": "index.html#ols-regression---log-transformation",
    "href": "index.html#ols-regression---log-transformation",
    "title": "AGILE2022 Reproducible Codes",
    "section": "OLS Regression - log transformation",
    "text": "OLS Regression - log transformation\n\n#Count data = Discrete Data\n#continuous: quantitative data that can take any value in some interval ⇒ linear models\n#discrete: quantitative data that takes a “countable” number of values\n#(e.g. 0, 1, 2, . . .) ⇒ generalised linear models (GLMs)\n#If your data are discrete but the counts are all fairly large, you can\n#ignore the discreteness and use linear models anyway. If you have small\n#counts and zeros though it is very important to use GLMs instead.\n\nmodel17 <- lm(log(ride17) ~ green + PTAI + height, data = glasgow_df) \nsummary(model17)\n\n\nCall:\nlm(formula = log(ride17) ~ green + PTAI + height, data = glasgow_df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.78035 -0.59604  0.08002  0.72427  1.76984 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 10.4216433  0.4704823  22.151  < 2e-16 ***\ngreen       -0.0656807  0.0232332  -2.827  0.00543 ** \nPTAI         0.0003435  0.0001738   1.976  0.05021 .  \nheight       0.1055714  0.0503079   2.099  0.03777 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.01 on 132 degrees of freedom\nMultiple R-squared:  0.3153,    Adjusted R-squared:  0.2997 \nF-statistic: 20.26 on 3 and 132 DF,  p-value: 7.342e-11\n\nresiduals(model17) %>% summary\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-2.78035 -0.59604  0.08002  0.00000  0.72427  1.76984 \n\n#exp(coef(model17)[\"green\"])\n#exp(coef(model17)[\"PTAI\"])\n#exp(coef(model17)[\"height\"])\n\ncar::vif(model17)\n\n   green     PTAI   height \n1.248832 2.348481 2.368797 \n\nAIC(model17, k=3) # k = parameter\n\n[1] 399.5545\n\n\n\nmodel18 <- lm(log(ride18) ~ log(green) + log(PTAI) + log(height), data = glasgow_df) \nsummary(model18)\n\n\nCall:\nlm(formula = log(ride18) ~ log(green) + log(PTAI) + log(height), \n    data = glasgow_df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.0003 -0.6849  0.1573  0.7204  1.7476 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   6.6582     1.4025   4.747 5.29e-06 ***\nlog(green)   -0.4349     0.2028  -2.144   0.0338 *  \nlog(PTAI)     0.3947     0.1996   1.978   0.0500 .  \nlog(height)   1.2745     0.4919   2.591   0.0107 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.018 on 132 degrees of freedom\nMultiple R-squared:  0.313, Adjusted R-squared:  0.2974 \nF-statistic: 20.05 on 3 and 132 DF,  p-value: 9.058e-11\n\nresiduals(model18)%>% summary\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-3.0003 -0.6849  0.1573  0.0000  0.7204  1.7476 \n\nAIC(model18, k=3) # k = parameter\n\n[1] 401.6285\n\n#exp(coef(model18)[\"green\"])\n#exp(coef(model18)[\"PTAI\"])\n#exp(coef(model18)[\"height\"])\n#car::vif(model18)\n\n\nshp %>% \n  left_join(glasgow_df, by = \"Name\") %>% \nbind_cols(\ntibble(Residuals18 = residuals(model18),\n       Residuals17 = residuals(model17))) -> glasgow_gwr\n\nplot(glasgow_gwr[\"Residuals17\"])\n\n\n\nmapres17 <- qtm(glasgow_gwr, fill = \"Residuals17\") + tm_legend(legend.position = c(\"right\", \"top\"))\nmapres18 <- qtm(glasgow_gwr, fill = \"Residuals18\") + tm_legend(legend.position = c(\"right\", \"top\"))\n(plot_residuals <- tmap_arrange(mapres17, mapres18, widths = 5, heights = 3))\n\nVariable(s) \"Residuals17\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"Residuals18\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"Residuals17\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"Residuals18\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n#tmap_save(plot_residuals, \"Residuals.jpg\")\n\n\n## Morans'I\nnb <- poly2nb(glasgow_gwr, queen=TRUE) # calculate neighbours queen continuity\nlistw <- nb2listw(nb, style=\"W\", zero.policy=TRUE)\n\nglobalMoran17 <- moran.test(glasgow_gwr$ride17, listw)\nglobalMoran18 <- moran.test(glasgow_gwr$ride18, listw)\nglobalMoran17\n\n\n    Moran I test under randomisation\n\ndata:  glasgow_gwr$ride17  \nweights: listw    \n\nMoran I statistic standard deviate = 7.4908, p-value = 3.422e-14\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.369743016      -0.007407407       0.002534943 \n\nglobalMoran18\n\n\n    Moran I test under randomisation\n\ndata:  glasgow_gwr$ride18  \nweights: listw    \n\nMoran I statistic standard deviate = 7.4377, p-value = 5.125e-14\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.366035942      -0.007407407       0.002521030 \n\nglasgow_sp <- as_Spatial(glasgow_gwr)\n\n\ngwr.bandwidth1 <-gwr.sel(log(ride18) ~ log(green) + log(PTAI) + log(height), \n                        data = glasgow_sp,\n                        adapt = T) #estimated optimal bandwidth\n\nAdaptive q: 0.381966 CV score: 142.0616 \nAdaptive q: 0.618034 CV score: 143.3678 \nAdaptive q: 0.236068 CV score: 139.4898 \nAdaptive q: 0.145898 CV score: 134.2445 \nAdaptive q: 0.09016994 CV score: 125.9838 \nAdaptive q: 0.05572809 CV score: 120.7797 \nAdaptive q: 0.03444185 CV score: 116.7516 \nAdaptive q: 0.02128624 CV score: 116.2329 \nAdaptive q: 0.0233313 CV score: 115.6423 \nAdaptive q: 0.02719672 CV score: 115.7782 \nAdaptive q: 0.02480776 CV score: 115.535 \nAdaptive q: 0.0248742 CV score: 115.5361 \nAdaptive q: 0.02470378 CV score: 115.5343 \nAdaptive q: 0.02466309 CV score: 115.5343 \nAdaptive q: 0.0246224 CV score: 115.5344 \nAdaptive q: 0.02466309 CV score: 115.5343 \n\ngwr.bandwidth1\n\n[1] 0.02466309\n\ngwr.fit2<-gwr(log(ride17) ~ log(green) + log(PTAI) + log(height), \n              data = glasgow_sp, \n              #bandwidth = gwr.bandwidth1, \n              adapt = 0.03,\n              se.fit=T, \n              hatmatrix=T)\n\nWarning in proj4string(data): CRS object has comment, which is lost in output; in tests, see\nhttps://cran.r-project.org/web/packages/sp/vignettes/CRS_warnings.html\n\n\nWarning in showSRID(uprojargs, format = \"PROJ\", multiline = \"NO\", prefer_proj\n= prefer_proj): Discarded datum Unknown based on Airy 1830 ellipsoid in Proj4\ndefinition\n\ngwr.fit2\n\nCall:\ngwr(formula = log(ride17) ~ log(green) + log(PTAI) + log(height), \n    data = glasgow_sp, adapt = 0.03, hatmatrix = T, se.fit = T)\nKernel function: gwr.Gauss \nAdaptive quantile: 0.03 (about 4 of 136 data points)\nSummary of GWR coefficient estimates at data points:\n                  Min.   1st Qu.    Median   3rd Qu.      Max.  Global\nX.Intercept. -8.731857  4.029839  5.959533  9.867533 20.484225  7.0704\nlog.green.   -2.238252 -0.601015  0.011518  0.464072  1.999999 -0.4817\nlog.PTAI.    -0.793808 -0.042598  0.520201  0.971566  2.781898  0.3726\nlog.height.  -4.061775 -0.195953  0.456595  1.377357  3.483895  1.1824\nNumber of data points: 136 \nEffective number of parameters (residual: 2traceS - traceS'S): 60.00132 \nEffective degrees of freedom (residual: 2traceS - traceS'S): 75.99868 \nSigma (residual: 2traceS - traceS'S): 0.8268993 \nEffective number of parameters (model: traceS): 45.31658 \nEffective degrees of freedom (model: traceS): 90.68342 \nSigma (model: traceS): 0.7569927 \nSigma (ML): 0.6181391 \nAICc (GWR p. 61, eq 2.33; p. 96, eq. 4.21): 397.165 \nAIC (GWR p. 96, eq. 4.22): 300.4245 \nResidual sum of squares: 51.96504 \nQuasi-global R2: 0.7356606 \n\n\n\nresults17 <-as.data.frame(gwr.fit2$SDF)\nnames(results17)\n\n [1] \"sum.w\"               \"X.Intercept.\"        \"log.green.\"         \n [4] \"log.PTAI.\"           \"log.height.\"         \"X.Intercept._se\"    \n [7] \"log.green._se\"       \"log.PTAI._se\"        \"log.height._se\"     \n[10] \"gwr.e\"               \"pred\"                \"pred.se\"            \n[13] \"localR2\"             \"X.Intercept._se_EDF\" \"log.green._se_EDF\"  \n[16] \"log.PTAI._se_EDF\"    \"log.height._se_EDF\"  \"pred.se.1\"          \n\nglasgow_gwr %>% \n  select(-c(green, PTAI, height)) %>% \n  bind_cols(results17) -> gwr_results17\n\nstrava17_localr2 <- qtm(gwr_results17, fill = \"localR2\") + tm_legend(legend.position = c(\"right\", \"top\"))\nstrava17_green   <- qtm(gwr_results17, fill = \"log.green.\")   + tm_legend(legend.position = c(\"right\", \"top\"))\nstrava17_ptai    <- qtm(gwr_results17, fill = \"log.PTAI.\")    + tm_legend(legend.position = c(\"right\", \"top\"))\nstrava17_height  <- qtm(gwr_results17, fill = \"log.height.\")  + tm_legend(legend.position = c(\"right\", \"top\"))\n\n#\n(plot_2017 <- tmap_arrange(strava17_localr2, strava17_green, strava17_ptai, strava17_height))\n\nVariable(s) \"log.green.\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"log.PTAI.\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"log.height.\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"log.green.\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"log.PTAI.\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"log.height.\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n#tmap_save(plot_2017, \"GWR2017.jpg\")\n\n\ngwr.bandwidth3 <-gwr.sel(log(ride18) ~ green + PTAI + height, \n                         data = glasgow_sp,\n                         adapt = T) #estimated optimal bandwidth\n\nAdaptive q: 0.381966 CV score: 138.8295 \nAdaptive q: 0.618034 CV score: 140.5099 \nAdaptive q: 0.236068 CV score: 136.1478 \nAdaptive q: 0.145898 CV score: 131.5708 \nAdaptive q: 0.09016994 CV score: 124.8027 \nAdaptive q: 0.05572809 CV score: 122.1225 \nAdaptive q: 0.03444185 CV score: 119.9508 \nAdaptive q: 0.02128624 CV score: 122.0017 \nAdaptive q: 0.03827299 CV score: 120.0087 \nAdaptive q: 0.03560744 CV score: 119.9427 \nAdaptive q: 0.03544382 CV score: 119.9438 \nAdaptive q: 0.03662559 CV score: 119.9341 \nAdaptive q: 0.03725484 CV score: 119.9401 \nAdaptive q: 0.03650315 CV score: 119.9354 \nAdaptive q: 0.03676456 CV score: 119.9324 \nAdaptive q: 0.03695183 CV score: 119.9334 \nAdaptive q: 0.03680959 CV score: 119.9324 \nAdaptive q: 0.03685028 CV score: 119.9325 \nAdaptive q: 0.03680959 CV score: 119.9324 \n\ngwr.bandwidth3\n\n[1] 0.03680959\n\n#\ngwr.fit4<-gwr(log(ride18) ~ log(green) + log(PTAI) + log(height),\n              data = glasgow_sp, \n              #bandwidth = gwr.bandwidth, \n              adapt = 0.03,\n              se.fit=T, \n              hatmatrix=T)\n\nWarning in proj4string(data): CRS object has comment, which is lost in output; in tests, see\nhttps://cran.r-project.org/web/packages/sp/vignettes/CRS_warnings.html\n\ngwr.fit4\n\nCall:\ngwr(formula = log(ride18) ~ log(green) + log(PTAI) + log(height), \n    data = glasgow_sp, adapt = 0.03, hatmatrix = T, se.fit = T)\nKernel function: gwr.Gauss \nAdaptive quantile: 0.03 (about 4 of 136 data points)\nSummary of GWR coefficient estimates at data points:\n                  Min.   1st Qu.    Median   3rd Qu.      Max.  Global\nX.Intercept. -7.769362  3.678493  5.881757  9.826402 20.373772  6.6582\nlog.green.   -1.958333 -0.551865  0.050780  0.475435  1.994233 -0.4349\nlog.PTAI.    -0.916947 -0.042468  0.505736  1.007547  2.647373  0.3947\nlog.height.  -3.561503 -0.038169  0.577012  1.657941  3.874595  1.2745\nNumber of data points: 136 \nEffective number of parameters (residual: 2traceS - traceS'S): 60.00132 \nEffective degrees of freedom (residual: 2traceS - traceS'S): 75.99868 \nSigma (residual: 2traceS - traceS'S): 0.8352189 \nEffective number of parameters (model: traceS): 45.31658 \nEffective degrees of freedom (model: traceS): 90.68342 \nSigma (model: traceS): 0.764609 \nSigma (ML): 0.6243583 \nAICc (GWR p. 61, eq 2.33; p. 96, eq. 4.21): 399.888 \nAIC (GWR p. 96, eq. 4.22): 303.1475 \nResidual sum of squares: 53.01596 \nQuasi-global R2: 0.7335358 \n\n#\nresults18 <-as.data.frame(gwr.fit4$SDF)\nnames(results18)\n\n [1] \"sum.w\"               \"X.Intercept.\"        \"log.green.\"         \n [4] \"log.PTAI.\"           \"log.height.\"         \"X.Intercept._se\"    \n [7] \"log.green._se\"       \"log.PTAI._se\"        \"log.height._se\"     \n[10] \"gwr.e\"               \"pred\"                \"pred.se\"            \n[13] \"localR2\"             \"X.Intercept._se_EDF\" \"log.green._se_EDF\"  \n[16] \"log.PTAI._se_EDF\"    \"log.height._se_EDF\"  \"pred.se.1\"          \n\nglasgow_gwr %>% \n  select(-c(green, PTAI, height)) %>% \n  bind_cols(results18) -> gwr_results18\n\nstrava18_localr2 <- qtm(gwr_results18, fill = \"localR2\") + tm_legend(legend.position = c(\"right\", \"top\"))\nstrava18_green <- qtm(gwr_results18, fill = \"log.green.\")     + tm_legend(legend.position = c(\"right\", \"top\"))\nstrava18_ptai <- qtm(gwr_results18, fill = \"log.PTAI.\")       + tm_legend(legend.position = c(\"right\", \"top\"))\nstrava18_height <- qtm(gwr_results18, fill = \"log.height.\")   + tm_legend(legend.position = c(\"right\", \"top\"))\n\n\n(plot_2018 <- tmap_arrange(strava18_localr2, strava18_green, strava18_ptai, strava18_height))\n\nVariable(s) \"log.green.\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"log.PTAI.\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"log.height.\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"log.green.\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"log.PTAI.\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nVariable(s) \"log.height.\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n#tmap_save(plot_2018, \"GWR2018.jpg\")"
  }
]